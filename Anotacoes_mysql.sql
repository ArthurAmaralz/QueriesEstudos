\

/* MODELAGEM BASICA - 
ENTIDADE = TABELA
CAMPOS = ATRIBUTOS
*/

CLIENTE

NOME = CARACTER(30)
CPF = NUMERICO(11)
EMAIL = CARACTER(30)
TELEFONE = CARACTER(30)
ENDEREÇO = CARACTER(100)
SEXO = CARACTER(1)

/* PROCESSOS DE MODELAGEM */

/* FASE 01 E FASE 02 - AD ADM DE DADOS */

MODELAGEM CONCEITUTAL = RASCUNHO
MODELAGEM LOGICA = QUALQUER PROGRAMA DE MODELAGEM

/* FASE 03 - DBA / AD */

MODELAAGEM FISICA = SCRIPTS DO BANCO

/* MODELAGEM FISICA - INICIO */

CREATE DATABASE PROJETO;

USE PROJETO; /* CONECTA NO BANCO DE DADOS */

CREATE TABLE CLIENTE(
	NOME VARCHAR(30),
	CPF INT(11),
	EMAIL VARCHAR(30),
	TELEFONE VARCHAR(30),
	ENDERECO VARCHAR(100),
	SEXO CHAR(1)
);

SHOW TABLES;

DESC CLIENTE; /* DESCREVER TABELAS */

/* INSERINDO DADOS 01 - OMITINDO COLUNAS */

INSERT INTO CLIENTE VALUES ('ARTHUR',0940940943,'ARTHUR@GMAIL.COM',
'88902191','RUA DAS PEDRAS','M');

INSERT INTO CLIENTE VALUES ('ARTHUR GOSTOSAO',0940940942,NULL,
'88902191','RUA DAS PEDRAS','M');

/* INSERINDO DADOS 02 - DESCREVENDO COLUNAS */

INSERT INTO CLIENTE(NOME,SEXO,EMAIL,TELEFONE,CPF) VALUES ('ARTHUR DAS TAPIOCAS','M','ARTHUR_BONITAO@GMAIL.COM','88902191',0940941943);

/* INSERINDO DADOS 03 - COMPACTO APENAS NO SQL */

INSERT INTO CLIENTE VALUES ('LAIS',0940943943,'LAIS@GMAIL.COM',
'88901291','RUA DAS OTARIAS','F'),
							('CARA',0945640942,NULL,
							'88945191','BLABLA','F');

/* SELECAO É UMA PROJEÇAO NO BANCO -
SELECT = SELECAO, PROJECAO E JUNCAO.
'''NAO ULTILIZAR SELECT * EM TRABALHOS REAIS''' */

SELECT NOME AS CLIENTE, CPF, SEXO, EMAIL, ENDERECO, NOW() AS DATA_HORA
FROM CLIENTE;


/* %EXE PROCURAR O QUE ESTA NO FINAL
    EXE% PROCURA O QUE ESTA NO INICIO 
   %EXE% PROCURA POR TODO CAMPO */
   
SELECT NOME, CPF, SEXO FROM CLIENTE WHERE ENDERECO LIKE '%RUA%';

/* EXERCICIO */

CREATE DATABASE LIVRARIA;

USE LIVRARIA;

CREATE TABLE LIVROS(
	NOME_DO_LIVRO VARCHAR(100),
	NOME_DO_AUTOR VARCHAR(30),
	SEXO_DO_AUTOR CHAR(1),
	NUMERO_DE_PAGINAS INT(4),
	NOME_DA_EDITORA VARCHAR(30),
	VALOR_DO_LIVRO FLOAT(10,2),
	ESTADO_DA_EDITORA CHAR(2),
	ANO_PUBLICACAO CHAR(4)
	);
	
ALTER TABLE LIVROS MODIFY NOME_DA_EDITORA VARCHAR(20) ; /* ALTERAR TIPO DO DADO NA COLUNA */

INSERT INTO LIVROS(NOME_DO_LIVRO, NOME_DO_AUTOR, SEXO_DO_AUTOR,
NUMERO_DE_PAGINAS, NOME_DA_EDITORA, VALOR_DO_LIVRO, ESTADO_DA_EDITORA,
ANO_PUBLICACAO) VALUES('Cavaleiro Real','Ana Claudia','F',465,'Atlas',49.9,'RJ',2009),
					('SQL para leigos','João Nunes','M',450,'Addison',98,'SP',2018),
					('Receitas Caseiras','Celia Tavares','F',210,'Atlas',45,'RJ',2008),
					('Pessoas Efetivas','Eduardo Santos','M',390,'Beta',78.99,'RJ',2018),
					('Habitos Saudáveis','Eduardo Santos','M',630,'Beta',150.98,'RJ',2019),
					('A Casa Marrom','Hermes Macedo','M',250,'Bubba',60,'MG',2016),
					('Estacio Querido','Geraldo Francisco','M',310,'Insignia',100,'ES',2015),
					('Pra sempre amigas','Leda Silva','F',510,'Insignia',78.98,'ES',2011),
					('Copas Inesqueciveis','Marco Alcantara','M',200,'Larson',130.98,'RS',2018),
					('O poder da mente','Clara Mafra','F',120,'Continental',56.58,'SP',2017);
					

------------------------------------------------------------------------------------------------
/* 1 – Trazer todos os dados. */

SHOW TABLES;
DESC LIVROS;
SELEC * FROM LIVROS;

/* 2 – Trazer o nome do livro e o nome da editora */

SELECT NOME_DO_LIVRO,NOME_DA_EDITORA FROM LIVROS;

/* 3 – Trazer o nome do livro e a UF dos livros publicados por autores do sexo masculino. */

SELECT NOME_DO_LIVRO,ESTADO_DA_EDITORA FROM LIVROS WHERE SEXO_DO_AUTOR = 'M';

/* 4 - Trazer o nome do livro e o número de páginas dos livros publicados por autores do sexo feminino. */

SELECT NOME_DO_LIVRO,NUMERO_DE_PAGINAS FROM LIVROS WHERE SEXO_DO_AUTOR = 'F';

/* 5 – Trazer os valores dos livros das editoras de São Paulo. */

SELECT NOME_DO_LIVRO,VALOR_DO_LIVRO FROM LIVROS WHERE ESTADO_DA_EDITORA = 'SP';

/* 6 – Trazer os dados dos autores do sexo masculino que tiveram livros publicados por São Paulo ou Rio de Janeiro (Questão Desafio). */

SELECT NOME_DO_AUTOR,NOME_DO_LIVRO,ANO_PUBLICACAO FROM LIVROS WHERE SEXO_DO_AUTOR = 'M' AND ESTADO_DA_EDITORA IN ('SP','RJ');


==============================================================================================================
/* EXERCICIOS */

create database exercicio;

create table funcionarios
  (
      idFuncionario integer,
      nome varchar(100),
      email varchar(200),
      sexo varchar(10),
      departamento varchar(100),
      admissao varchar(10),
      salario integer,
      cargo varchar(100),
      idRegiao int
  );
  
--Traga os funcionarios que trabalhem
--no departamento de filmes OU no
--departamento de roupas

SELECT DEPARTAMENTO, COUNT(*) AS QUANTIDADE FROM FUNCIONARIOS WHERE DEPARTAMENTO IN ('ROUPAS','FILMES') GROUP BY DEPARTAMENTO;

--O gestor de marketing pediu a lista das funcionarias (AS) = FEMININO que trabalhem no departamento 
--de filmes ou no departamento lar. Ele necessita enviar um email para as colaboradoras
--desses dois setores.

SELECT NOME AS FUNCIONARIAS, DEPARTAMENTO, EMAIL FROM FUNCIONARIOS 
WHERE DEPARTAMENTO IN ('LAR','FILMES') AND SEXO = 'Feminino'
ORDER BY DEPARTAMENTO;

SELECT NOME AS FUNCIONARIAS, SEXO, DEPARTAMENTO, EMAIL FROM FUNCIONARIOS 
WHERE DEPARTAMENTO IN ('LAR','FILMES') AND SEXO LIKE 'F%'
ORDER BY DEPARTAMENTO;

--Traga os funcionarios do sexo masculino
--ou os funcionarios que trabalhem no setor Jardim

SELECT * FROM FUNCIONARIOS WHERE SEXO = 'Masculino' OR DEPARTAMENTO = 'JARDIM';
SELECT * FROM FUNCIONARIOS WHERE SEXO LIKE 'M%' OR DEPARTAMENTO = 'JARDIM';
---------------------------------------------------------------------------------------------------------------

/* MOSTRA TODOS OS BANCOS */

SHOW DATABASES;

SELECT COUNT(*) FROM CLIENTE;

SELECT SEXO, COUNT(*) AS "QUANTIDADE" FROM CLIENTE GROUP BY SEXO;

/* PERFOMACE - AO USAR "OR" SEMPRE CONSIDERAR O PRIMEIRO ITEM COMO SENDO O DE MAIOR QUANTIDADE
A APARECER, JÁ NO "AND" FAZER O INVERSO" */

--VALORES NULOS

SELECT * FROM CLIENTE WHERE EMAIL IS NULL
SELECT * FROM CLIENTE WHERE EMAIL IS NOT NULL

--UPDATE - SEMPRE USAR COM WHERE, PARA NÃO MODIFICAR TODA TABELA!!!

UPDATE CLIENTE SET EMAIL = 'ARTHUR@GMAIL.COM' WHERE NOME = 'ARTHUR';

--DELETE - DA MESMA FORMA QUE O UPDATE, USAR SEMPRE COM WHERE!!
-- ANTES DE USAR O DELETE CONFIRMAR COM O SELECT SE ESTÁ CORRETO OS VALORES!!

SELECT * FROM CLIENTE WHERE NOME = 'ARTHUR'; 
DELETE FROM CLIENTE WHERE NOME = 'ARTHUR';

========================================================================
/* PRIMEIRA FORMA NORMAL */

/*

1 - TODO CAMPO VETORIZADO SE TORNAR'A OUTRA TABELA

[AMARELO, AZUL, LARANJA, VERDE] -> CORES
[KA, FIESTA, UNO, CIVIC]-> CARROS

2 - TODO CAMPO MULTIVALORADO SE TORNAR'A OUTRA TABELA.
QUANDO O CAMPO FOR DIVIS'IVEL

3 - TODA TABELA NECESSITA DE PELO MENOS UM CAMPO QUE IDENTIFIQUE
TODO O REGISTRO COMO SENDO UNICO.
ISSO ;E O QUE CHAMAMOS DE CHAVE PRIMARIA OU PRIMARY KEY.

/* CADINALIDADE */

/* QUEM DEFINE A CARDINALIDADE É A REGRA DE NEGOCIOS */

/* PRIMEIRO ALGARISMO - OBRIGATORIEDADE 
0 - NAO OBRIGATORIO
1 - OBRIGATORIO

SEGUNDO ALGARISMO - CARDINALIDADE
1 - MAXIMO DE UM
N - MAIS DE UM


/* ENDERECO - OBRIGATORIO 
CADASTRO DE SOMENTE UM.

TELEFONE - NAO OBRIGATORIO
CADASTRO DE MAIS DE UM (OPCIONAL) /*

/*
CHAVE ESTRANGEIRA É A CHAVE PRIMARIA DE UMA TABELA
QUE VAI ATÉ A OUTRA TABELA PARA FAZER REFERENCIA ENTRE
REGISTROS */

/* EM RELACIONAMENTO 1 X 1 A CHAVE ESTRANGEIRA FICA NA TABELA MAIS FRACA */

/* EM RELACIONAMENTO 1 X N A CHAVE ESTRANGEIRA FICARA SEMPRE NA
CARDINALIDADE N 


*/
==========================================================================

CREATE DATABASE COMERCIO;

USE COMERCIO;

CREATE TABLE CLIENTE(
	IDCLIENTE INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(50) NOT NULL,
	SEXO ENUM('M','F') NOT NULL,
	EMAIL VARCHAR (50) UNIQUE,
	CPF VARCHAR(15) UNIQUE
);

CREATE TABLE ENDERECO(
	IDENDERECO INT PRIMARY KEY AUTO_INCREMENT,
	RUA VARCHAR(50) NOT NULL,
	BAIRRO VARCHAR(30) NOT NULL,
	CIDADE VARCHAR(30) NOT NULL,
	ESTADO CHAR(2) NOT NULL,
	ID_CLIENTE INT UNIQUE,
	
	FOREIGN KEY (ID_CLIENTE)
	REFERENCES CLIENTE(IDCLIENTE)
);

CREATE TABLE TELEFONE(
	IDTELEFONE INT PRIMARY KEY AUTO_INCREMENT,
	TIPO ENUM('FIXO','CEL'),
	NUMERO VARCHAR(10),
	ID_CLIENTE INT,
	
	FOREIGN KEY (ID_CLIENTE)
	REFERENCES CLIENTE(IDCLIENTE)
);

ALTER TABLE TELEFONE MODIFY TIPO ENUM('RES','COM','CEL') ;


-------------------------------------------------------------------------------------------------------------

SELECT CLIENTE.NOME, CLIENTE.SEXO, ENDERECO.BAIRRO, ENDERECO.CIDADE, TELEFONE.TIPO, TELEFONE.NUMERO
FROM CLIENTE 
INNER JOIN ENDERECO
ON CLIENTE.IDCLIENTE = ENDERECO.ID_CLIENTE
INNER JOIN TELEFONE
ON CLIENTE.IDCLIENTE = TELEFONE.ID_CLIENTE;

-------------------------------------------------------------------------------------------------------------


--JUNÇAO DE DUAS TABELAS

SELECT C.NOME, C.SEXO, C.EMAIL, E.BAIRRO, E.CIDADE
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE;

--JUNCAO DE TRES TABELAS:

SELECT C.NOME, C.SEXO, C.EMAIL, E.BAIRRO, E.CIDADE, T.NUMERO, T.TIPO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE;


/*
	
	DML - DATA MANIPULATION LANGUAGE
	DDL - DATA DEFINITION LANGUAGE
	DCL - DATA CONTROL LANGUAGE
	TCL - TRANSACTION CONTROL LANGUAGE

*/

/* INSERT */

INSERT INTO CLIENTE VALUES(NULL,'PAULA','M',NULL,'77437493');
INSERT INTO ENDERECO VALUES(NULL,'RUA JOAQUIM SILVA','ALVORADA','NITEROI','RJ',7);

SELECT * FROM CLIENTE;

/* FILTROS */

SELECT * FROM CLIENTE
WHERE SEXO = 'M';

/* UPDATE */

SELECT * FROM CLIENTE
WHERE IDCLIENTE = 7;

UPDATE CLIENTE
SET SEXO = 'F'
WHERE IDCLIENTE = 7;

/* DELETE */ 

INSERT INTO CLIENTE VALUES(NULL,'XXX','M',NULL,'XXX');

SELECT * FROM CLIENTE
WHERE IDCLIENTE = 8;

DELETE FROM CLIENTE WHERE IDCLIENTE = 8;



/* 
  DDL - DATA DEFINITION LANGUAGE
*/

CREATE TABLE PRODUTO(
	IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
	NOME_PRODUTO VARCHAR(30) NOT NULL,
	PRECO INT,
	FRETE FLOAT(10,2) NOT NULL
);

/* ALTER TABLE */

/* ALTERANDO O NOME DE UMA COLUNA - CHANGE */

ALTER TABLE PRODUTO
CHANGE PRECO VALOR_UNITARIO INT NOT NULL;

DESC PRODUTO;

ALTER TABLE PRODUTO
CHANGE VALOR_UNITARIO VALOR_UNITARIO INT;

DESC PRODUTO;

/* MODIFY - ALTERANDO O TIPO */

ALTER TABLE PRODUTO
MODIFY VALOR_UNITARIO VARCHAR(50) NOT NULL;

/* ADICIONANDO COLUNAS */

ALTER TABLE PRODUTO
ADD PESO FLOAT(10,2) NOT NULL;

/* APAGANDO UMA COLUNA */

ALTER TABLE PRODUTO
DROP COLUMN PESO;

/* ADICIONANDO UMA COLUNA NA ORDEM ESPECIFICA */

ALTER TABLE PRODUTO
ADD COLUMN PESO FLOAT(10,2) NOT NULL
AFTER NOME_PRODUTO;

ALTER TABLE PRODUTO
DROP COLUMN PESO;

ALTER TABLE PRODUTO
ADD COLUMN PESO FLOAT(10,2) NOT NULL
FIRST;


===================================================================================

/* RELATORIO GERAL DE TODOS OS CLIENTES (TELEFONE E ENDERECO) */

DESC CLIENTE;
DESC ENDERECO;
DESC TELEFONE;

SELECT C.IDCLIENTE, C.NOME, C.SEXO, C.EMAIL, C.CPF, 
	   E.RUA, E.BAIRRO, E.CIDADE, E.ESTADO, 
	   T.TIPO, T.NUMERO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE;

/* RELATORIO DE HOMENS */

SELECT C.IDCLIENTE, C.NOME, C.SEXO, C.EMAIL, C.CPF, 
	   E.RUA, E.BAIRRO, E.CIDADE, E.ESTADO, 
	   T.TIPO, T.NUMERO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
WHERE C.SEXO = 'M';

/* CORRIGIR OS REGISTROS COM NOME FEMININOS ONDE SEXO É MASCULINO */

SELECT * FROM CLIENTE WHERE IDCLIENTE IN(12,13,18,19);

UPDATE CLIENTE SET SEXO = 'F' WHERE IDCLIENTE IN (12,13,18,19);

/* RELATORIO DE MULHERES */

SELECT C.IDCLIENTE, C.NOME, C.SEXO, C.EMAIL, C.CPF, 
	   E.RUA, E.BAIRRO, E.CIDADE, E.ESTADO, 
	   T.TIPO, T.NUMERO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
WHERE C.SEXO = 'F';


UPDATE CLIENTE SET SEXO = 'M' WHERE IDCLIENTE = 16;


/* QUANTIDADE DE HOMENS E MULHERES */

SELECT SEXO, COUNT(*) AS QTD FROM CLIENTE GROUP BY SEXO;

/* IDS E EMAIL DAS MULHERES QUE MOREM NO CENTRO DO RIO DE JANEIRO E 
NAO TENHAM CELULAR */

SELECT C.IDCLIENTE, C.EMAIL, 
	   E.BAIRRO, E.CIDADE
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
WHERE SEXO = 'F'
AND BAIRRO = 'CENTRO' AND CIDADE = 'RIO DE JANEIRO'
AND TIPO NOT LIKE 'CEL';

/* PARA UMA CAMPANHA DE MARKETING, O SETOR SOLICITOU UM
RELATÓRIO COM O NOME, EMAIL E TELEFONE CELULAR 
DOS CLIENTES QUE MORAM NO ESTADO DO RIO DE JANEIRO 
VOCÊ TERÁ QUE PASSAR A QUERY PARA GERAR O RELATORIO PARA
O PROGRAMADOR */

SELECT C.NOME, C.EMAIL, 
	   T.NUMERO AS CELULAR
FROM CLIENTE C
INNER JOIN ENDERECO 
ON C.IDCLIENTE = ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
WHERE TIPO = 'CEL' AND ESTADO = 'RJ';

/* PARA UMA CAMPANHA DE PRODUTOS DE BELEZA, O COMERCIAL SOLICITOU UM
RELATÓRIO COM O NOME, EMAIL E TELEFONE CELULAR 
 DAS MULHERES QUE MORAM NO ESTADO DE SÃO PAULO 
VOCÊ TERÁ QUE PASSAR A QUERY PARA GERAR O RELATORIO PARA
O PROGRAMADOR */


SELECT C.NOME, C.EMAIL, 
	   T.NUMERO AS CELULAR
FROM CLIENTE C
INNER JOIN ENDERECO 
ON C.IDCLIENTE = ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE
WHERE TIPO = 'CEL' AND ESTADO = 'SP' AND SEXO = 'F';

-- IFNULL PARA OS CASOS DE VALORES NULOS

SELECT  C.NOME, 
		IFNULL(C.EMAIL,'************') AS "E-MAIL", 
		E.ESTADO, 
		T.NUMERO
FROM CLIENTE C
INNER JOIN ENDERECO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE;


-- CRIANDO UMA VIEW

CREATE VIEW V_RELATORIO AS
SELECT  C.NOME, 
		C.SEXO, 
		IFNULL(C.EMAIL,'CLIENTE SEM EMAIL') AS "E-MAIL", 
		T.TIPO, 
		T.NUMERO, 
		E.BAIRRO, 
		E.CIDADE, 
		E.ESTADO
FROM CLIENTE C 
INNER JOIN TELEFONE T 
ON C.IDCLIENTE = T.ID_CLIENTE 
INNER JOIN ENDERECO E 
ON C.IDCLIENTE = E.ID_CLIENTE;

--PODEMOS FAZER UMA QUERY DENTRO DA VIEW

SELECT NOME, NUMERO, ESTADO
FROM V_RELATORIO;

/* É PERMITIDO FAZER UPDATES EM VIEWS COM JOIN, MAS NÃO
DELETE OU INSERT */


-- ORDER BY 

SELECT IDCLIENTE, NOME
FROM CLIENTE 
ORDER BY 1;

SELECT IDCLIENTE, NOME
FROM CLIENTE 
ORDER BY 1, 2; --ORDENA AS DUAS COLUNAS

SELECT IDCLIENTE, NOME
FROM CLIENTE 
ORDER BY NOME; --ORDENA PELA COLUNA

SELECT IDCLIENTE, NOME
FROM CLIENTE 
ORDER BY NOME ASC; --ASC PRA ORDENAR CRESCENTE

SELECT IDCLIENTE, NOME
FROM CLIENTE 
ORDER BY NOME DESC, IDCLIENTE DESC; --DESC PRA ORDENAR DECRECENTE


/* PROCEDURES */

CREATE TABLE CURSOS(
	IDCURSO INT PRIMARY KEY AUTO_INCREMENT,
	NOME_CURSO VARCHAR(30),
	HORAS INT(30),
	VALOR FLOAT(10,2)
);

DELIMITER #

CREATE PROCEDURE INSERIR(P_NOME VARCHAR(30),
						 P_HORAS INT(30), 
						 P_VALOR FLOAT(10,2))
BEGIN
	INSERT INTO CURSOS VALUES (NULL,P_NOME,P_HORAS,P_VALOR);
END#

CALL INSERIR('PYTHON',60,1000.00)#
CALL INSERIR('JAVA',80,1500.00)#
CALL INSERIR('SQL',40,500.00)#
CALL INSERIR('BI SQL SERVER',35,3000.00)#
CALL INSERIR('POWER BI',20,1000.00)#
CALL INSERIR('TABLEAU',30,1200.00)#

/* PROCEDURE PARA CONSULTA DE CURSOS */

CREATE PROCEDURE CONSULTA(P_NOME VARCHAR(30))
BEGIN
	SELECT IDCURSO, NOME_CURSO, HORAS, VALOR
	FROM CURSOS
	WHERE NOME_CURSO = P_NOME;
END#

CALL CONSULTA('PYTHON')#

/* SUBQUERY */

-- CURSO MAIS BARATO
SELECT IDCURSO, NOME_CURSO, HORAS,VALOR AS MENOR_VALOR 
FROM CURSOS
WHERE VALOR = (SELECT MIN(VALOR) FROM CURSOS)#

--CURSO MAIS CARO
SELECT IDCURSO, NOME_CURSO, HORAS, VALOR AS MAIOR_VALOR 
FROM CURSOS 
WHERE VALOR = (SELECT MAX(VALOR) FROM CURSOS)#

--MEDIA DOS PRECOS
SELECT TRUNCATE(AVG(VALOR),2) "MEDIA DE PRECOS"
FROM CURSOS#

--SOMA DE TODOS OS VALORES
SELECT SUM(VALOR) AS VALOR_DE_TODOS_CURSOS
FROM CURSOS#


/* A29 FUNCOES DE AGREGACAO NUMERICAS */

CREATE TABLE VENDEDORES(
	IDVENDEDOR INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	SEXO CHAR(1),
	JANEIRO FLOAT(10,2),
	FEVEREIRO FLOAT(10,2),
	MARCO FLOAT(10,2)
);

/* VARIAS FUNCOES */

SELECT MAX(JANEIRO) AS MAX_JAN,
       MIN(JANEIRO) AS MIN_JAN,
	   AVG(JANEIRO) AS MEDIA_JAN
	   FROM VENDEDORES;
	 
/*TRUNCATE */
	 
SELECT MAX(JANEIRO) AS MAX_JAN,
       MIN(JANEIRO) AS MIN_JAN,
	   TRUNCATE(AVG(JANEIRO),2) AS MEDIA_JAN
	   FROM VENDEDORES;

/* A30 - AGREGANDO COM SUM() */

SELECT SUM(JANEIRO) AS TOTAL_JAN
FROM VENDEDORES;

SELECT SUM(JANEIRO) AS TOTAL_JAN,
	   SUM(FEVEREIRO) AS TOTAL_FEV,
	   SUM(MARCO) AS TOTAL_MAR
FROM VENDEDORES;

/* VENDAS POR SEXO */

SELECT SEXO, SUM(MARCO) AS TOTAL_MARCO
FROM VENDEDORES
GROUP BY SEXO;

/* MAIOR VENDA DE FEREVEIRO */

SELECT NOME, FEVEREIRO
FROM VENDEDORES
WHERE FEVEREIRO = (SELECT MAX(FEVEREIRO) FROM VENDEDORES);

/* ACIMA DA MEDIA DE VENDAS DE MARCO */

SELECT NOME, MARCO
FROM VENDEDORES
WHERE MARCO > (SELECT AVG(MARCO) FROM VENDEDORES);

SELECT AVG(MARCO) FROM VENDEDORES;

/* OPERACOES EM COLUNAS */

SELECT NOME, JANEIRO, FEVEREIRO, MARCO,
	   (JANEIRO+FEVEREIRO+MARCO) AS TOTAL,
	   (JANEIRO+FEVEREIRO+MARCO) * .10 AS DESCONTO,
	   TRUNCATE((JANEIRO+FEVEREIRO+MARCO)/3,2) AS "MEDIA"
FROM VENDEDORES;	   

/* ALTERANDO TABELAS */

CREATE TABLE TABELA(
	COL1 VARCHAR(10),
	COL2 VARCHAR(10),
	COL3 VARCHAR(10)
);

ALTER TABLE TABELA
ADD PRIMARY KEY (COL1);

ALTER TABLE TABELA
ADD COL INT(10);

--ADD UMA COLUNA E A POSICAO
ALTER TABLE TABELA
ADD COL4 VARCHAR(30) NOT NULL UNIQUE
AFTER COL3;

--MODIFICA A TABELA JA CRIADA E O TIPO
ALTER TABLE TABELA
MODIFY COL2 DATE NOT NULL;

--RENOMEIA A TABELA
ALTER TABLE TABELA
RENAME PESSOA;


CREATE TABLE TIME(
	IDTIME INT PRIMARY KEY AUTO_INCREMENT,
	TIME VARCHAR(30),
	ID_PESSOA VARCHAR(30)
);

--FOREIGN KEY
ALTER TABLE TIME
ADD FOREIGN KEY(ID_PESSOA)
REFERENCES PESSOA(COL1);

SHOW CREATE TABLE TIME;

-------------------------------------------------------

/* MANEIRA CORRETA DE MONTAR UM BANCO */

CREATE DATABASE BANCO_PRO;

USE BANCO_PRO;

CREATE TABLE CLIENTE(
	IDCLIENTE INT,
	NOME VARCHAR(30) NOT NULL
);

CREATE TABLE TELEFONE(
	IDTELEFONE INT,
	TIPO CHAR(3) NOT NULL,
	NUMERO VARCHAR(10) NOT NULL,
	ID_CLIENTE INT
);

ALTER TABLE CLIENTE ADD CONSTRAINT PK_CLIENTE
PRIMARY KEY(IDCLIENTE);

ALTER TABLE TELEFONE ADD CONSTRAINT PK_TELEFONE
PRIMARY KEY(IDTELEFONE);

ALTER TABLE TELEFONE ADD CONSTRAINT FK_CLIENTE_TELEFONE
FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(IDCLIENTE);

SHOW CREATE TABLE TELEFONE;
SHOW CREATE TABLE CLIENTE;

/* PESQUISA NOS DICIONARIOS DO BANCO */

SELECT TABLE_SCHEMA,CONSTRAINT_SCHEMA, CONSTRAINT_NAME, TABLE_NAME, CONSTRAINT_TYPE
FROM TABLE_CONSTRAINTS;


SELECT TABLE_SCHEMA AS NOME_TABELA,
	   CONSTRAINT_SCHEMA AS "NOME TAMBEM??",
	   CONSTRAINT_NAME AS "NOME REGRA",
	   TABLE_NAME AS "TABELA",
	   CONSTRAINT_TYPE AS TIPO
FROM TABLE_CONSTRAINTS
WHERE TABLE_NAME IN ('CLIENTE','TELEFONE');

SELECT TABLE_SCHEMA AS NOME_TABELA,
	   CONSTRAINT_SCHEMA AS "NOME TAMBEM??",
	   CONSTRAINT_NAME AS "NOME REGRA",
	   TABLE_NAME AS "TABELA",
	   CONSTRAINT_TYPE AS TIPO
FROM TABLE_CONSTRAINTS
WHERE TABLE_SCHEMA = 'BANCO_PRO'; -- OU SÓ O BANCO

SELECT *
FROM TABLE_CONSTRAINTS;

/* APAGANDO CONSTRAINTS */

USE COMERCIO;

ALTER TABLE TELEFONE
DROP FOREIGN KEY FK_CLIENTE_TELEFONE;

ALTER TABLE TELEFONE ADD CONSTRAINT FK_CLIENTE_TELEFONE
FOREIGN KEY(ID_CLIENTE) REFERENCES CLIENTE(IDCLIENTE);


--------------------------------------------------------------

/* MODELAGEM EXERCICIO */


--CRIANDO BANCO E TABELAS
CREATE DATABASE OFICINA;

USE OFICINA;

CREATE TABLE CLIENTE(
	IDCLIENTE INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30) NOT NULL,
	CPF VARCHAR(11) NOT NULL UNIQUE,
	ID_CARRO INT UNIQUE
);

CREATE TABLE CARRO(
	IDCARRO INT PRIMARY KEY AUTO_INCREMENT,
	MODELO VARCHAR(20) NOT NULL,
	PLACA VARCHAR(10) NOT NULL UNIQUE,
	ID_MARCA INT
);

CREATE TABLE TELEFONE(
	IDTELEFONE INT PRIMARY KEY AUTO_INCREMENT,
	TIPO ENUM('RES','COM','CEL') NOT NULL,
	NUMERO VARCHAR(10) NOT NULL,
	ID_CLIENTE INT
);

CREATE TABLE COR(
	IDCOR INT PRIMARY KEY AUTO_INCREMENT,
	COR VARCHAR(10) NOT NULL UNIQUE
);

-- MARCAR UNIQUE >>NAO REPETIR A MARCAR NO CADASTRO
CREATE TABLE MARCA(
	IDMARCA INT PRIMARY KEY AUTO_INCREMENT,
	MARCA VARCHAR(20) UNIQUE 
);

CREATE TABLE CARRO_COR(
	ID_CARRO INT,
	ID_COR INT,
	PRIMARY KEY (ID_CARRO,ID_COR)
);


--ADD CHAVES PRIMARIAS E ESTRANGEIRAS

/* ALTER TABLE CLIENTE ADD CONSTRAINT PK_CLIENTE
PRIMARY KEY(IDCLIENTE);

ALTER TABLE CARRO ADD CONSTRAINT PK_CARRO
PRIMARY KEY (IDCARRO);

ALTER TABLE COR ADD CONSTRAINT PK_COR
PRIMARY KEY (IDCOR);

ALTER TABLE TELEFONE ADD CONSTRAINT PK_TELEFONE
PRIMARY KEY (IDTELEFONE); */

ALTER TABLE CLIENTE ADD CONSTRAINT FK_CARRO_CLIENTE
FOREIGN KEY(ID_CARRO) REFERENCES CARRO(IDCARRO);

ALTER TABLE TELEFONE ADD CONSTRAINT FK_CLIENTE_TELEFONE
FOREIGN KEY(ID_CLIENTE) REFERENCES CLIENTE(IDCLIENTE);

ALTER TABLE CARRO ADD CONSTRAINT FK_MARCA_CARRO
FOREIGN KEY (ID_MARCA) REFERENCES MARCA(IDMARCA);

ALTER TABLE CARRO_COR ADD CONSTRAINT FK_CARRO
FOREIGN KEY (ID_CARRO) REFERENCES CARRO(IDCARRO);

ALTER TABLE CARRO_COR ADD CONSTRAINT FK_COR
FOREIGN KEY (ID_COR) REFERENCES COR(IDCOR);


-- TESTE DE INSERTS
INSERT INTO MARCA VALUES(NULL,'FIAT');
INSERT INTO MARCA VALUES(NULL,'FORD');

INSERT INTO CARRO VALUES(NULL,'UNO','QEQWEEQW',1);
INSERT INTO CARRO VALUES(NULL,'FIESTA','QEEWEEQW',2);
INSERT INTO CARRO VALUES(NULL,'PALIO','QEEWE53W',1);

INSERT INTO CLIENTE VALUES(NULL,'ARTHUR','123123',5);

INSERT INTO TELEFONE VALUES(NULL,'CEL','346547',1);

INSERT INTO COR VALUES(NULL,'PRETO');

INSERT INTO CARRO_COR VALUES(5,1);



SELECT C.IDCARRO, C.MODELO, C.PLACA, 
	   M.MARCA,
	   D.IDCLIENTE, D.NOME, D.CPF,
	   T.TIPO, T.NUMERO
FROM CARRO C
INNER JOIN MARCA M
ON C.ID_MARCA = M.IDMARCA
INNER JOIN CLIENTE D
ON C.IDCARRO = D.ID_CARRO
INNER JOIN TELEFONE T
ON D.IDCLIENTE = T.ID_CLIENTE;



/* CRIANDO TRIGGER */

CREATE DATABASE AULA_TRIGGER;

USE AULA_TRIGGER;

CREATE TABLE USUARIO(
	IDUSUARIO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	LOGIN VARCHAR(30),
	SENHA VARCHAR(100)
);

CREATE TABLE BKP_USE(
	IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
	ID_USUARIO INT,
	NOME VARCHAR(30),
	LOGIN VARCHAR(30)
);

DELIMITER #

CREATE TRIGGER BKP_USE
BEFORE DELETE ON USUARIO
FOR EACH ROW
BEGIN
	INSERT INTO BKP_USE VALUES(
	NULL,OLD.IDUSUARIO,OLD.NOME,OLD.LOGIN);
END#

DELIMITER ;

INSERT INTO USUARIO VALUES(NULL,'ARTHUR','GOSTOSAO','1234');

DELETE FROM USUARIO WHERE IDUSUARIO = 1;

SELECT * FROM BKP_USE;

/* COMUNICACAO ENTRE BANCOS */

CREATE DATABASE BACKUP;

USE BACKUP;

CREATE TABLE BKP_PRODUTO(
	IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
	ID_PRODUTO INT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2)
);

USE AULA_TRIGGER;

CREATE TABLE PRODUTO(
	IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2)
);

DELIMITER #

CREATE TRIGGER BKP_PRODUTO_INS
AFTER INSERT ON AULA_TRIGGER.PRODUTO
FOR EACH ROW
BEGIN
	INSERT BACKUP.BKP_PRODUTO VALUES(
	NULL,NEW.IDPRODUTO,NEW.NOME,NEW.VALOR,'INS');
END#

DELIMITER ;

INSERT INTO PRODUTO VALUES(NULL,'SABAO',1);
INSERT INTO PRODUTO VALUES(NULL,'FEIJAO',7);
INSERT INTO PRODUTO VALUES(NULL,'ARROZ',10);
INSERT INTO PRODUTO VALUES(NULL,'DETERGENTE',9);
INSERT INTO PRODUTO VALUES(NULL,'FARINHA',3);


DELIMITER #

CREATE TRIGGER BKP_PRODUTO_DEL
BEFORE DELETE ON AULA_TRIGGER.PRODUTO
FOR EACH ROW
BEGIN
	INSERT BACKUP.BKP_PRODUTO VALUES(
	NULL,OLD.IDPRODUTO,OLD.NOME,OLD.VALOR,'DEL');
END#

DELIMITER ;


ALTER TABLE BACKUP.BKP_PRODUTO
ADD EVENTO CHAR(3);

-------------------------------------------------------

/* AUDITANTO UMA TRIGGER */

DROP DATABASE BACKUP;

CREATE DATABASE LOJA;

USE LOJA;

CREATE TABLE PRODUTO(
	IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2)
);

CREATE DATABASE BACKUP;

USE BACKUP;

CREATE TABLE BKP_PRODUTO(
	IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
	ID_PRODUTO INT,
	NOME VARCHAR(30),
	VALOR_ORIGINAL FLOAT(10,2),
	VALOR_ATUALIZADO FLOAT(10,2),
	DATA DATETIME,
	USUARIO VARCHAR(30),
	EVENTO CHAR(3)
);

DELIMITER #

CREATE TRIGGER AUDITORIA
AFTER UPDATE ON LOJA.PRODUTO
FOR EACH ROW
BEGIN
	INSERT INTO BACKUP.BKP_PRODUTO VALUES(
	NULL,OLD.IDPRODUTO,OLD.NOME,OLD.VALOR,NEW.VALOR,NOW(),
	CURRENT_USER,'UPD');
END#

DELIMITER ;


INSERT INTO PRODUTO VALUES(NULL,'SABAO',1);
INSERT INTO PRODUTO VALUES(NULL,'FEIJAO',7);
INSERT INTO PRODUTO VALUES(NULL,'ARROZ',10);
INSERT INTO PRODUTO VALUES(NULL,'DETERGENTE',9);
INSERT INTO PRODUTO VALUES(NULL,'FARINHA',3);

UPDATE PRODUTO SET VALOR = 15
WHERE NOME = 'FEIJAO';


/* AUTORELACIONAMENTO */

CREATE DATABASE UDEMY;

USE UDEMY;

CREATE TABLE CURSOS(
	IDCURSOS INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	HORAS INT,
	VALOR FLOAT(10,2),
	ID_PREREQ INT
);

ALTER TABLE CURSOS ADD CONSTRAINT FK_PREREQ
FOREIGN KEY(ID_PREREQ) REFERENCES CURSOS(IDCURSOS);

INSERT INTO CURSOS VALUES(NULL,'BANCO NOOB',23,234.00,NULL);
INSERT INTO CURSOS VALUES(NULL,'LOGICA',65,456.00,NULL);
INSERT INTO CURSOS VALUES(NULL,'PYTHON',79,1230.00,2);
INSERT INTO CURSOS VALUES(NULL,'SQL',54,4564.00,1);
INSERT INTO CURSOS VALUES(NULL,'CIENCIA DADOS',79,7643.00,3);
INSERT INTO CURSOS VALUES(NULL,'JAVA',88,6757.00,2);

SELECT NOME, HORAS, VALOR, IDCURSOS, IFNULL(ID_PREREQ,"SEM REQUISITO") AS REQUISITO
FROM CURSOS;

/* EM VEZ DE MOSTRAR O ID DO REQUISITO, MOSTRAR O CURSO */

-- QUERY DE AUTO RELACIONAMENTO

SELECT C.NOME AS CURSO,
	   C.HORAS AS CARGA,
	   C.VALOR AS VALOR,
	   IFNULL(B.NOME,"SEM REQUISITO") AS REQUISITO 
FROM CURSOS C
LEFT JOIN CURSOS B -- O LEFT TRAZ TAMBEM OS VALORES NULOS
ON B.IDCURSOS = C.ID_PREREQ;

-- COMO QUEREMOS MOSTRAR O NOME NA TABELA, COLOCAMOS ISSO NO SELECT "B.NOME"
-- "B.IDCURSOS" PARA RELACIONAR COM O NOME QUE VAMOS MOSTRAR
-- "C.ID_PREREQ" VAI LINKAR A REFERENCIA



/* A 45 - CURSORES */

CREATE DATABASE CURSORES;
USE CURSORES;

CREATE TABLE VENDEDORES(
	IDVENDEDOR INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(50),
	JAN INT,
	FEV INT,
	MAR INT
);

INSERT INTO VENDEDORES VALUES(NULL,'MAFRA',32432,242334,574545);
INSERT INTO VENDEDORES VALUES(NULL,'CLARA',65465,65443,653454);
INSERT INTO VENDEDORES VALUES(NULL,'JOAO',12432,65356,8756);
INSERT INTO VENDEDORES VALUES(NULL,'LILIAN',4567,9676,8765);
INSERT INTO VENDEDORES VALUES(NULL,'ANTONIO',3467,68756,99765);
INSERT INTO VENDEDORES VALUES(NULL,'GLORIA',54786,76889,7098);

SELECT * FROM VENDEDORES;

SELECT NOME, (JAN+FEV+MAR) AS TOTAL FROM VENDEDORES;
SELECT NOME, (JAN+FEV+MAR) AS TOTAL, (JAN+FEV+MAR)/3 AS MEDIA FROM VENDEDORES;

CREATE TABLE VEND_TOTAL(
	NOME VARCHAR(50),
	JAN INT,
	FEV INT,
	MAR INT,
	TOTAL INT,
	MEDIA INT
);

/*  AULA 88 - CRIANDO UMA PROCEDURE PARA O CURSOR */
/* ESSA PROCEDURE DUPLICARAR TODOS OS REGISTROS CONTIDOS SEMPRE QUE EXECUTADA */

DELIMITER #

CREATE PROCEDURE INSERTDADOS()
BEGIN
	DECLARE FIM INT DEFAULT 0;
	DECLARE VNOME VARCHAR(50);
	DECLARE VAR1, VAR2, VAR3, VTOTAL, VMEDIA INT;
	
	/* QUAIS REGISTROS CONTIDOS NA TABELA PARA JOGAR NA MEMORIA */
	DECLARE REG CURSOR FOR(SELECT NOME, JAN, FEV, MAR FROM VENDEDORES);
	/* DECLARACAO PADRAO */
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET FIM = 1;

	OPEN REG;
	
	REPEAT
		FETCH REG INTO VNOME, VAR1, VAR2, VAR3;
		IF NOT FIM THEN
			/* ATRIBUIU O VALOR AS VARIAVEIS DECLARADAS */
			SET VTOTAL = VAR1 + VAR2 + VAR3;
			SET VMEDIA = VTOTAL / 3;
			/* INSERE ESSES VALORES DENTRO DA TABELA DE DESTINO*/
			INSERT INTO VEND_TOTAL VALUES(
			VNOME, VAR1, VAR2, VAR3, VTOTAL, VMEDIA);
		END IF;
	UNTIL FIM END REPEAT;
	CLOSE REG;
END#
		
DELIMITER ;

/* A 46 TRIGGERS COM VARIAVEIS */

DELIMITER $

CREATE TRIGGER CADTOTAL
BEFORE INSERT ON VENDEDORES
FOR EACH ROW
BEGIN
		DECLARE VTOTAL, VMEDIA INT;
		
		SET VTOTAL = NEW.JAN + NEW.FEV + NEW.MAR;
		SET VMEDIA = (NEW.JAN + NEW.FEV + NEW.MAR)/3;
		
		INSERT INTO VEND_TOTAL VALUES(NEW.NOME,NEW.JAN,NEW.FEV,NEW.MAR,VTOTAL,VMEDIA);

END
$

DELIMITER ;


/* AULA 90 - SEGUNDA E TERCEIRAS FORMAS NORMAIS */

/*
	 PRIMEIRA FN
	 
	 ATOMICIDADE - UM CAMPO NAO PODE SER DIVISIVEL
	 UM CAMPO NAO PODE SER VETORIZADO
	 PK CHAVE PRIMARIA

*/

CREATE DATABASE CONSULTORIO;

CREATE TABLE PACIENTE(
	IDPACIENTE INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	SEXO CHAR(1),
	EMAIL VARCHAR(30),
	NASCIMENTO DATE
);

CREATE TABLE MEDICO(
	IDMEDICO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	SEXO CHAR(1),
	ESPECIALIDADE VARCHAR(30),
	FUNCIONARIO ENUM('S','N')
);

CREATE TABLE HOSPITAL(
	IDHOSPITAL INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	BAIRRO VARCHAR(30),
	CIDADE VARCHAR(30),
	ESTADO CHAR(2)
);

CREATE TABLE CONSULTA(
	IDCONSULTA INT PRIMARY KEY AUTO_INCREMENT,
	ID_PACIENTE INT,
	ID_MEDICO INT,
	ID_HOSPITAL INT,
	DATA DATETIME,
	DIAGNOSTICO VARCHAR(50)
);

CREATE TABLE INTERNACAO(
	IDINTERNACAO INT PRIMARY KEY AUTO_INCREMENT,
	ENTRADA DATETIME,
	QUARTO INT,
	SAIDA DATETIME,
	OBSERVACOES VARCHAR(50),
	ID_CONSULTA INT UNIQUE	
); 


ALTER TABLE CONSULTA ADD CONSTRAINT FK_PACIENTE_CONSULTA
FOREIGN KEY (ID_PACIENTE) REFERENCES PACIENTE(IDPACIENTE);

ALTER TABLE CONSULTA ADD CONSTRAINT FK_MEDICO_CONSULTA
FOREIGN KEY (ID_MEDICO) REFERENCES MEDICO(IDMEDICO);

ALTER TABLE CONSULTA ADD CONSTRAINT FK_HOSPITAL_CONSULTA
FOREIGN KEY (ID_HOSPITAL) REFERENCES HOSPITAL(IDHOSPITAL);

ALTER TABLE INTERNACAO ADD CONSTRAINT FK_CONSULTA_INTERNACAO
FOREIGN KEY (ID_CONSULTA) REFERENCES CONSULTA(IDCONSULTA);


/* CRIANDO AS CONSTRAINTS - CORREÇÃO COD do OBJ (PK, FK) _ TABELA PERTENCENTE _ TABELA DE ONDE VEM*/

--VERIFICAR A NOMECLATURA CORRETA
ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_PACIENTE
FOREIGN KEY(ID_PACIENTE) REFERENCES PACIENTE(IDPACIENTE);

ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_MEDICO
FOREIGN KEY(ID_MEDICO) REFERENCES MEDICO(IDMEDICO);

ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_HOSPITAL
FOREIGN KEY(ID_HOSPITAL) REFERENCES HOSPITAL(IDHOSPITAL);

ALTER TABLE INTERNACAO ADD CONSTRAINT FK_INTERNACAO_CONSULTA
FOREIGN KEY(ID_CONSULTA) REFERENCES CONSULTA(IDCONSULTA);









